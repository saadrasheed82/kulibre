import { useState, useMemo, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Layout } from "@/components/layout/Layout";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { useQuery, useQueryClient, useMutation } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Database } from "@/integrations/supabase/types";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { toast } from "@/components/ui/sonner";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuRadioGroup, 
  DropdownMenuRadioItem, 
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
  DropdownMenuGroup
} from "@/components/ui/dropdown-menu";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { 
  Calendar, 
  Clock, 
  Filter, 
  Grid, 
  List, 
  Search, 
  SlidersHorizontal, 
  MoreVertical, 
  Edit, 
  Trash2, 
  Archive, 
  CheckCircle, 
  AlertCircle, 
  Clock as ClockIcon, 
  PauseCircle 
} from "lucide-react";

// Define project type
interface Project {
  id: string;
  name: string;
  description?: string;
  type: string;
  status: string;
  client_id: string;
  created_at: string;
  created_by: string;
  updated_at: string;
  start_date: string;
  due_date: string;
  client?: string;
  progress?: number;
  priority?: 'Low' | 'Medium' | 'High';
  team_members?: string[];
}

// Status color mapping
const statusColors = {
  'In Progress': 'bg-blue-100 text-blue-700',
  'Awaiting Feedback': 'bg-yellow-100 text-yellow-700',
  'Approved': 'bg-green-100 text-green-700',
  'Archived': 'bg-gray-100 text-gray-700',
  'Completed': 'bg-emerald-100 text-emerald-700',
  'On Hold': 'bg-orange-100 text-orange-700',
  'Not Started': 'bg-purple-100 text-purple-700',
};

// Priority color mapping
const priorityColors = {
  'Low': 'bg-blue-100 text-blue-700',
  'Medium': 'bg-yellow-100 text-yellow-700',
  'High': 'bg-red-100 text-red-700',
};

export default function Projects() {
  // Get the query client instance
  const queryClient = useQueryClient();
  
  // View state (grid or list)
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  
  // Filter states
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [typeFilter, setTypeFilter] = useState<string[]>([]);
  const [teamMemberFilter, setTeamMemberFilter] = useState<string[]>([]);
  const [priorityFilter, setPriorityFilter] = useState<string[]>([]);
  
  // Sort state
  const [sortBy, setSortBy] = useState<string>('due_date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  
  // Search state
  const [searchQuery, setSearchQuery] = useState<string>('');
  
  // User authentication state
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  
  // Button loading state
  const [isButtonLoading, setIsButtonLoading] = useState(false);

  // Navigation hook
  const navigate = useNavigate();
  
  // Check if user is authenticated
  useEffect(() => {
    const checkAuth = async () => {
      const { data, error } = await supabase.auth.getUser();
      if (error) {
        console.error("Error checking authentication:", error);
        return;
      }
      setIsAuthenticated(!!data.user);
    };
    
    checkAuth();
  }, []);
  
  // Function to handle new project button click
  const handleNewProjectClick = () => {
    // Set button to loading state
    setIsButtonLoading(true);
    
    try {
      // Check authentication before navigating
      supabase.auth.getUser().then(({ data, error }) => {
        if (error) {
          console.error("Authentication error:", error);
          toast.error("Authentication error: " + error.message);
          return;
        }
        
        if (!data.user) {
          toast.error("Please log in to create a project");
          navigate('/login');
          return;
        }
        
        // Navigate to the new project page if user is authenticated
        navigate('/projects/new');
      }).catch(err => {
        console.error("Error checking authentication:", err);
        toast.error("Failed to verify authentication status");
      }).finally(() => {
        // Reset button loading state
        setIsButtonLoading(false);
      });
    } catch (err) {
      console.error("Unexpected error navigating to new project:", err);
      toast.error("An unexpected error occurred");
      setIsButtonLoading(false);
    }
  };
  
  // Fetch projects with related data
  const { data: projects, isLoading, error: projectsError, refetch } = useQuery({
    queryKey: ['projects'],
    queryFn: async () => {
      try {
        // Get current user
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error("User not authenticated");
        
        // Fetch projects with client information
        const { data: projectsData, error: projectsError } = await supabase
          .from('projects')
          .select(`
            *,
            clients:client_id (
              id,
              name
            )
          `)
          .order('created_at', { ascending: false });
        
        if (projectsError) throw projectsError;
        
        // Process each project to get team members and calculate progress
        const enhancedProjects = await Promise.all((projectsData || []).map(async (project) => {
          // Fetch team members for this project
          const { data: teamMembers, error: teamError } = await supabase
            .from('project_members')
            .select(`
              profiles:user_id (
                id,
                full_name,
                avatar_url
              )
            `)
            .eq('project_id', project.id);
          
          if (teamError) console.error(`Error fetching team for project ${project.id}:`, teamError);
          
          // Fetch tasks to calculate progress
          const { data: tasks, error: tasksError } = await supabase
            .from('tasks')
            .select('*')
            .eq('project_id', project.id);
          
          if (tasksError) console.error(`Error fetching tasks for project ${project.id}:`, tasksError);
          
          // Calculate progress based on completed tasks
          let progress = 0;
          if (tasks && tasks.length > 0) {
            const completedTasks = tasks.filter(task => task.completed_at !== null).length;
            progress = Math.round((completedTasks / tasks.length) * 100);
          }
          
          // Map database status to display status
          let displayStatus = project.status;
          if (project.status === 'draft') displayStatus = 'Not Started';
          else if (project.status === 'in_progress') displayStatus = 'In Progress';
          else if (project.status === 'review') displayStatus = 'Awaiting Feedback';
          else if (project.status === 'approved') displayStatus = 'Approved';
          else if (project.status === 'archived') displayStatus = 'Archived';
          else if (project.status === 'completed') displayStatus = 'Completed';
          
          // Determine priority based on due date and progress
          let priority: 'Low' | 'Medium' | 'High' = 'Medium';
          if (project.due_date) {
            const dueDate = new Date(project.due_date);
            const today = new Date();
            const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
            
            if (daysUntilDue < 3) {
              priority = 'High';
            } else if (daysUntilDue > 14) {
              priority = 'Low';
            }
          }
          
          return {
            ...project,
            status: displayStatus,
            client: project.clients && 'name' in project.clients ? project.clients.name : 'No Client',
            progress: progress,
            priority: priority,
            team_members: teamMembers ? 
              teamMembers
                .filter(member => member.profiles && typeof member.profiles === 'object')
                .map(member => {
                  if ('full_name' in member.profiles) {
                    return member.profiles.full_name;
                  }
                  return 'Unknown Member';
                }) 
              : []
          };
        }));
        
        return enhancedProjects as Project[];
      } catch (error) {
        console.error("Error fetching projects:", error);
        throw error;
      }
    },
    retry: 1,
    staleTime: 5 * 60 * 1000 // 5 minutes
  });

  // Get unique values for filters
  const uniqueStatuses = useMemo(() => 
    [...new Set(projects?.map(p => p.status) || [])], 
    [projects]
  );
  
  const uniqueTypes = useMemo(() => 
    [...new Set(projects?.map(p => p.type) || [])], 
    [projects]
  );
  
  const uniqueTeamMembers = useMemo(() => {
    const allMembers = projects?.flatMap(p => p.team_members || []) || [];
    return [...new Set(allMembers)];
  }, [projects]);

  // Filter and sort projects
  const filteredProjects = useMemo(() => {
    if (!projects) return [];
    
    return projects
      .filter(project => {
        // Apply status filter
        if (statusFilter.length > 0 && !statusFilter.includes(project.status)) {
          return false;
        }
        
        // Apply type filter
        if (typeFilter.length > 0 && !typeFilter.includes(project.type)) {
          return false;
        }
        
        // Apply team member filter
        if (teamMemberFilter.length > 0 && !project.team_members?.some(member => teamMemberFilter.includes(member))) {
          return false;
        }
        
        // Apply priority filter
        if (priorityFilter.length > 0 && !priorityFilter.includes(project.priority || '')) {
          return false;
        }
        
        // Apply search query
        if (searchQuery && !project.name.toLowerCase().includes(searchQuery.toLowerCase()) && 
            !project.client?.toLowerCase().includes(searchQuery.toLowerCase())) {
          return false;
        }
        
        return true;
      })
      .sort((a, b) => {
        // Sort by selected field
        if (sortBy === 'due_date') {
          const dateA = new Date(a.due_date || '').getTime();
          const dateB = new Date(b.due_date || '').getTime();
          return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
        }
        
        if (sortBy === 'progress') {
          const progressA = a.progress || 0;
          const progressB = b.progress || 0;
          return sortOrder === 'asc' ? progressA - progressB : progressB - progressA;
        }
        
        if (sortBy === 'priority') {
          const priorityValues = { 'Low': 1, 'Medium': 2, 'High': 3 };
          const priorityA = priorityValues[a.priority || 'Low'];
          const priorityB = priorityValues[b.priority || 'Low'];
          return sortOrder === 'asc' ? priorityA - priorityB : priorityB - priorityA;
        }
        
        // Default sort by name
        return sortOrder === 'asc' 
          ? a.name.localeCompare(b.name) 
          : b.name.localeCompare(a.name);
      });
  }, [projects, statusFilter, typeFilter, teamMemberFilter, priorityFilter, searchQuery, sortBy, sortOrder]);

  // Function to delete a project
  const handleDeleteProject = async (projectId: string) => {
    if (!confirm("Are you sure you want to delete this project? This action cannot be undone.")) {
      return;
    }
    
    try {
      // First delete related records (project_members, tasks, etc.)
      const { error: membersError } = await supabase
        .from('project_members')
        .delete()
        .eq('project_id', projectId);
      
      if (membersError) {
        console.error("Error deleting project members:", membersError);
        toast.error("Failed to delete project members");
        return;
      }
      
      // Delete tasks if they exist
      const { error: tasksError } = await supabase
        .from('tasks')
        .delete()
        .eq('project_id', projectId);
      
      if (tasksError) {
        console.error("Error deleting project tasks:", tasksError);
        toast.error("Failed to delete project tasks");
        return;
      }
      
      // Finally delete the project
      const { error: projectError } = await supabase
        .from('projects')
        .delete()
        .eq('id', projectId);
      
      if (projectError) {
        console.error("Error deleting project:", projectError);
        toast.error(`Failed to delete project: ${projectError.message}`);
        return;
      }
      
      // Success - refresh the projects list
      toast.success("Project deleted successfully");
      refetch();
      
    } catch (error: any) {
      console.error("Error in project deletion:", error);
      toast.error(`An error occurred: ${error.message}`);
    }
  };
  
  // Function to update project status
  const handleUpdateProjectStatus = async (projectId: string, newStatus: string) => {
    try {
      // Map display status back to database status
      let dbStatus: Database["public"]["Enums"]["project_status"] = "draft";
      if (newStatus === 'Not Started') dbStatus = "draft";
      else if (newStatus === 'In Progress') dbStatus = "in_progress";
      else if (newStatus === 'Awaiting Feedback') dbStatus = "review";
      else if (newStatus === 'Approved') dbStatus = "approved";
      else if (newStatus === 'Completed') dbStatus = "completed";
      else if (newStatus === 'Archived') dbStatus = "archived";
      
      const { error } = await supabase
        .from('projects')
        .update({ status: dbStatus, updated_at: new Date().toISOString() })
        .eq('id', projectId);
      
      if (error) {
        console.error("Error updating project status:", error);
        toast.error(`Failed to update status: ${error.message}`);
        return;
      }
      
      toast.success(`Project status updated to ${newStatus}`);
      refetch();
      
    } catch (error: any) {
      console.error("Error in status update:", error);
      toast.error(`An error occurred: ${error.message}`);
    }
  };
  
  // Function to archive a project
  const handleArchiveProject = async (projectId: string) => {
    try {
      const { error } = await supabase
        .from('projects')
        .update({ 
          status: "archived" as Database["public"]["Enums"]["project_status"], 
          updated_at: new Date().toISOString() 
        })
        .eq('id', projectId);
      
      if (error) {
        console.error("Error archiving project:", error);
        toast.error(`Failed to archive project: ${error.message}`);
        return;
      }
      
      toast.success("Project archived successfully");
      refetch();
      
    } catch (error: any) {
      console.error("Error in project archiving:", error);
      toast.error(`An error occurred: ${error.message}`);
    }
  };
  
  // Format date for display
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'No date';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  };

  return (
    <Layout>
      <div className="space-y-8">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Projects</h1>
            <p className="text-muted-foreground mt-1">Manage your creative projects</p>
          </div>
          <Button 
            onClick={handleNewProjectClick}
            disabled={isButtonLoading}
          >
            {isButtonLoading ? "Loading..." : "+ New Project"}
          </Button>
        </div>

        {/* Filters and View Toggle */}
        <div className="flex flex-col md:flex-row justify-between gap-4">
          <div className="flex flex-1 gap-2">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-8"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            
            {/* Filter Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="gap-2">
                  <Filter className="h-4 w-4" />
                  Filter
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56">
                <DropdownMenuLabel>Filter by Status</DropdownMenuLabel>
                {uniqueStatuses.map(status => (
                  <DropdownMenuCheckboxItem
                    key={status}
                    checked={statusFilter.includes(status)}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setStatusFilter([...statusFilter, status]);
                      } else {
                        setStatusFilter(statusFilter.filter(s => s !== status));
                      }
                    }}
                  >
                    {status}
                  </DropdownMenuCheckboxItem>
                ))}
                
                <DropdownMenuSeparator />
                
                <DropdownMenuLabel>Filter by Type</DropdownMenuLabel>
                {uniqueTypes.map(type => (
                  <DropdownMenuCheckboxItem
                    key={type}
                    checked={typeFilter.includes(type)}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setTypeFilter([...typeFilter, type]);
                      } else {
                        setTypeFilter(typeFilter.filter(t => t !== type));
                      }
                    }}
                  >
                    {type}
                  </DropdownMenuCheckboxItem>
                ))}
                
                <DropdownMenuSeparator />
                
                <DropdownMenuLabel>Filter by Team Member</DropdownMenuLabel>
                {uniqueTeamMembers.map(member => (
                  <DropdownMenuCheckboxItem
                    key={member}
                    checked={teamMemberFilter.includes(member)}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setTeamMemberFilter([...teamMemberFilter, member]);
                      } else {
                        setTeamMemberFilter(teamMemberFilter.filter(m => m !== member));
                      }
                    }}
                  >
                    {member}
                  </DropdownMenuCheckboxItem>
                ))}
                
                <DropdownMenuSeparator />
                
                <DropdownMenuLabel>Filter by Priority</DropdownMenuLabel>
                {['Low', 'Medium', 'High'].map(priority => (
                  <DropdownMenuCheckboxItem
                    key={priority}
                    checked={priorityFilter.includes(priority)}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setPriorityFilter([...priorityFilter, priority]);
                      } else {
                        setPriorityFilter(priorityFilter.filter(p => p !== priority));
                      }
                    }}
                  >
                    {priority}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            
            {/* Sort Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="gap-2">
                  <SlidersHorizontal className="h-4 w-4" />
                  Sort
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56">
                <DropdownMenuLabel>Sort By</DropdownMenuLabel>
                <DropdownMenuRadioGroup value={sortBy} onValueChange={setSortBy}>
                  <DropdownMenuRadioItem value="name">Name</DropdownMenuRadioItem>
                  <DropdownMenuRadioItem value="due_date">Deadline</DropdownMenuRadioItem>
                  <DropdownMenuRadioItem value="progress">Status</DropdownMenuRadioItem>
                  <DropdownMenuRadioItem value="priority">Priority</DropdownMenuRadioItem>
                </DropdownMenuRadioGroup>
                
                <DropdownMenuSeparator />
                
                <DropdownMenuLabel>Order</DropdownMenuLabel>
                <DropdownMenuRadioGroup value={sortOrder} onValueChange={(value) => setSortOrder(value as 'asc' | 'desc')}>
                  <DropdownMenuRadioItem value="asc">Ascending</DropdownMenuRadioItem>
                  <DropdownMenuRadioItem value="desc">Descending</DropdownMenuRadioItem>
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          
          {/* View Toggle */}
          <ToggleGroup type="single" value={viewMode} onValueChange={(value) => value && setViewMode(value as 'grid' | 'list')}>
            <ToggleGroupItem value="grid" aria-label="Grid view">
              <Grid className="h-4 w-4" />
            </ToggleGroupItem>
            <ToggleGroupItem value="list" aria-label="List view">
              <List className="h-4 w-4" />
            </ToggleGroupItem>
          </ToggleGroup>
        </div>
        
        {/* Active Filters */}
        {(statusFilter.length > 0 || typeFilter.length > 0 || teamMemberFilter.length > 0 || priorityFilter.length > 0) && (
          <div className="flex flex-wrap gap-2 items-center">
            <span className="text-sm text-muted-foreground">Active filters:</span>
            
            {statusFilter.map(status => (
              <Badge key={`status-${status}`} variant="secondary" className="gap-1">
                {status}
                <button 
                  className="ml-1 hover:text-primary"
                  onClick={() => setStatusFilter(statusFilter.filter(s => s !== status))}
                >
                  ×
                </button>
              </Badge>
            ))}
            
            {typeFilter.map(type => (
              <Badge key={`type-${type}`} variant="secondary" className="gap-1">
                {type}
                <button 
                  className="ml-1 hover:text-primary"
                  onClick={() => setTypeFilter(typeFilter.filter(t => t !== type))}
                >
                  ×
                </button>
              </Badge>
            ))}
            
            {teamMemberFilter.map(member => (
              <Badge key={`member-${member}`} variant="secondary" className="gap-1">
                {member}
                <button 
                  className="ml-1 hover:text-primary"
                  onClick={() => setTeamMemberFilter(teamMemberFilter.filter(m => m !== member))}
                >
                  ×
                </button>
              </Badge>
            ))}
            
            {priorityFilter.map(priority => (
              <Badge key={`priority-${priority}`} variant="secondary" className="gap-1">
                {priority}
                <button 
                  className="ml-1 hover:text-primary"
                  onClick={() => setPriorityFilter(priorityFilter.filter(p => p !== priority))}
                >
                  ×
                </button>
              </Badge>
            ))}
            
            <Button 
              variant="ghost" 
              size="sm" 
              className="ml-auto text-muted-foreground"
              onClick={() => {
                setSearchQuery('');
                setStatusFilter([]);
                setTypeFilter([]);
                setTeamMemberFilter([]);
                setPriorityFilter([]);
              }}
            >
              Clear All
            </Button>
          </div>
        )}

        {/* Grid View */}
        {viewMode === 'grid' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredProjects.map((project) => (
              <Card key={project.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-2 flex flex-row justify-between items-start">
                  <div>
                    <CardTitle className="text-xl">{project.name}</CardTitle>
                    <p className="text-sm text-muted-foreground">Client: {project.client}</p>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <MoreVertical className="h-4 w-4" />
                        <span className="sr-only">Open menu</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => navigate(`/projects/${project.id}`)}>
                        <Edit className="mr-2 h-4 w-4" />
                        Edit Project
                      </DropdownMenuItem>
                      
                      <DropdownMenuSeparator />
                      
                      <DropdownMenuGroup>
                        <DropdownMenuLabel>Change Status</DropdownMenuLabel>
                        <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Not Started')}>
                          <PauseCircle className="mr-2 h-4 w-4 text-purple-500" />
                          Not Started
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'In Progress')}>
                          <ClockIcon className="mr-2 h-4 w-4 text-blue-500" />
                          In Progress
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Awaiting Feedback')}>
                          <AlertCircle className="mr-2 h-4 w-4 text-yellow-500" />
                          Awaiting Feedback
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Completed')}>
                          <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
                          Completed
                        </DropdownMenuItem>
                      </DropdownMenuGroup>
                      
                      <DropdownMenuSeparator />
                      
                      <DropdownMenuItem onClick={() => handleArchiveProject(project.id)}>
                        <Archive className="mr-2 h-4 w-4 text-orange-500" />
                        Archive Project
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => handleDeleteProject(project.id)}
                        className="text-red-600 focus:text-red-600"
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete Project
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <div className="flex gap-2">
                        <Badge>{project.type}</Badge>
                        <Badge className={statusColors[project.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-700'}>
                          {project.status}
                        </Badge>
                      </div>
                      <Badge className={priorityColors[project.priority as keyof typeof priorityColors] || 'bg-gray-100 text-gray-700'}>
                        {project.priority}
                      </Badge>
                    </div>
                    
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Progress</span>
                        <span className="font-medium">{project.progress}%</span>
                      </div>
                      <Progress value={project.progress} className="h-2" />
                    </div>
                    
                    <div className="flex justify-between items-center text-sm">
                      <div className="flex items-center gap-1 text-muted-foreground">
                        <Calendar className="h-4 w-4" />
                        <span>Due: {formatDate(project.due_date)}</span>
                      </div>
                      {project.due_date && (
                        <div className="flex items-center gap-1 text-muted-foreground">
                          <Clock className="h-4 w-4" />
                          <span>
                            {(() => {
                              const dueDate = new Date(project.due_date);
                              const today = new Date();
                              const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
                              
                              if (daysUntilDue < 0) return `${Math.abs(daysUntilDue)} days overdue`;
                              if (daysUntilDue === 0) return `Due today`;
                              return `${daysUntilDue} days left`;
                            })()}
                          </span>
                        </div>
                      )}
                    </div>
                    
                    <div className="flex -space-x-2">
                      {(project.team_members || []).slice(0, 3).map((member, i) => (
                        <div 
                          key={i} 
                          className="h-7 w-7 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium border-2 border-background"
                          title={member}
                        >
                          {member.split(' ').map(n => n[0]).join('')}
                        </div>
                      ))}
                      {(project.team_members?.length || 0) > 3 && (
                        <div className="h-7 w-7 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-xs font-medium border-2 border-background">
                          +{(project.team_members?.length || 0) - 3}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="pt-0">
                  <Button 
                    variant="outline" 
                    className="w-full" 
                    onClick={() => navigate(`/projects/${project.id}`)}
                  >
                    View Details
                  </Button>
                </CardFooter>
              </Card>
            ))}

            {isLoading && (
              <div className="col-span-full py-8 text-center">
                <div className="animate-pulse flex flex-col items-center">
                  <div className="h-8 w-8 bg-muted rounded-full mb-4"></div>
                  <div className="h-4 w-48 bg-muted rounded mb-2"></div>
                  <div className="h-3 w-32 bg-muted rounded"></div>
                </div>
              </div>
            )}

            {projectsError && (
              <div className="col-span-full py-8 text-center text-red-500">
                <p>Error loading projects. Please try again.</p>
                <Button 
                  variant="outline" 
                  className="mt-4" 
                  onClick={() => refetch()}
                >
                  Retry
                </Button>
              </div>
            )}

            {!isLoading && !projectsError && !filteredProjects.length && (
              <p className="text-muted-foreground col-span-full text-center py-8">
                No projects found. Try adjusting your filters or create a new project.
              </p>
            )}
          </div>
        )}

        {/* List View */}
        {viewMode === 'list' && (
          <div className="overflow-hidden rounded-lg border">
            <table className="w-full">
              <thead className="bg-muted/50">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium">Project</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Client</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Type</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Status</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Progress</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Priority</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Due Date</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Team</th>
                  <th className="px-4 py-3 text-left text-sm font-medium">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y">
                {filteredProjects.map((project) => (
                  <tr key={project.id} className="hover:bg-muted/50">
                    <td className="px-4 py-3 text-sm font-medium">
                      <Button 
                        variant="link" 
                        className="p-0 h-auto font-medium"
                        onClick={() => navigate(`/projects/${project.id}`)}
                      >
                        {project.name}
                      </Button>
                    </td>
                    <td className="px-4 py-3 text-sm">{project.client}</td>
                    <td className="px-4 py-3 text-sm">
                      <Badge>{project.type}</Badge>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <Badge 
                        className={statusColors[project.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-700'}
                      >
                        {project.status}
                      </Badge>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <div className="w-full max-w-24">
                        <div className="flex justify-between text-xs mb-1">
                          <span>{project.progress}%</span>
                        </div>
                        <Progress value={project.progress} className="h-2" />
                      </div>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <Badge 
                        className={priorityColors[project.priority as keyof typeof priorityColors] || 'bg-gray-100 text-gray-700'}
                      >
                        {project.priority}
                      </Badge>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      {formatDate(project.due_date)}
                      {project.due_date && (
                        <div className="text-xs text-muted-foreground mt-1">
                          {(() => {
                            const dueDate = new Date(project.due_date);
                            const today = new Date();
                            const daysUntilDue = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
                            
                            if (daysUntilDue < 0) return `${Math.abs(daysUntilDue)} days overdue`;
                            if (daysUntilDue === 0) return `Due today`;
                            return `${daysUntilDue} days left`;
                          })()}
                        </div>
                      )}
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <div className="flex -space-x-2">
                        {(project.team_members || []).slice(0, 3).map((member, index) => (
                          <div 
                            key={index} 
                            className="h-7 w-7 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium border-2 border-background"
                            title={member}
                          >
                            {member.split(' ').map(n => n[0]).join('')}
                          </div>
                        ))}
                        {(project.team_members?.length || 0) > 3 && (
                          <div className="h-7 w-7 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-xs font-medium border-2 border-background">
                            +{(project.team_members?.length || 0) - 3}
                          </div>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <MoreVertical className="h-4 w-4" />
                            <span className="sr-only">Open menu</span>
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => navigate(`/projects/${project.id}`)}>
                            <Edit className="mr-2 h-4 w-4" />
                            Edit Project
                          </DropdownMenuItem>
                          
                          <DropdownMenuSeparator />
                          
                          <DropdownMenuGroup>
                            <DropdownMenuLabel>Change Status</DropdownMenuLabel>
                            <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Not Started')}>
                              <PauseCircle className="mr-2 h-4 w-4 text-purple-500" />
                              Not Started
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'In Progress')}>
                              <ClockIcon className="mr-2 h-4 w-4 text-blue-500" />
                              In Progress
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Awaiting Feedback')}>
                              <AlertCircle className="mr-2 h-4 w-4 text-yellow-500" />
                              Awaiting Feedback
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleUpdateProjectStatus(project.id, 'Completed')}>
                              <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
                              Completed
                            </DropdownMenuItem>
                          </DropdownMenuGroup>
                          
                          <DropdownMenuSeparator />
                          
                          <DropdownMenuItem onClick={() => handleArchiveProject(project.id)}>
                            <Archive className="mr-2 h-4 w-4 text-orange-500" />
                            Archive Project
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            onClick={() => handleDeleteProject(project.id)}
                            className="text-red-600 focus:text-red-600"
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete Project
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {isLoading && (
              <div className="p-8 text-center">
                <div className="animate-pulse flex flex-col items-center">
                  <div className="h-8 w-8 bg-muted rounded-full mb-4"></div>
                  <div className="h-4 w-48 bg-muted rounded mb-2"></div>
                  <div className="h-3 w-32 bg-muted rounded"></div>
                </div>
              </div>
            )}

            {projectsError && (
              <div className="p-8 text-center text-red-500">
                <p>Error loading projects. Please try again.</p>
                <Button 
                  variant="outline" 
                  className="mt-4" 
                  onClick={() => refetch()}
                >
                  Retry
                </Button>
              </div>
            )}

            {!isLoading && !projectsError && !filteredProjects.length && (
              <p className="text-muted-foreground text-center py-8">
                No projects found. Try adjusting your filters or create a new project.
              </p>
            )}
          </div>
        )}
      </div>
    </Layout>
  );
}